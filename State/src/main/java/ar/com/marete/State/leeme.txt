		Introduccion y nombre
		
State. De comportamiento. Permite que un objeto modifique su comportamiento cada vez que cambie su estado interno. 


		Intencion
		
Busca que un objeto pueda reaccionar segun su estado interno. Si bien muchas veces esto se puede solucionar con un boolean o utilizando
constantes, esto suele terminar con una gran cantidad de if-else, codigo ilegible y dificultad en el mantenimiento. La intencion del 
State es desacoplar el estado de la clase en cuestion.

 		Motivacion
 	
 En determinados ocasiones se requiere que un objeto tenga diferentes comportamientos segun el estado en que se encuentra. Esto resulta
 complicado de manejar, sobretodo cuando se debe tener en cuenta el cambio de comportamientos y estados de dicho objeto, todos 
 dentro del mismo bloque de codigo. El patron State propone una solucion a esta complicacion, creando un objeto por cada estado posible. 
 
 		Solucion

Este patron debe ser utilizado cuando:

	-El comportamiento de un objeto depende de un estado, y debe cambiar en tiempo de ejecucion segun el comportamiento del estado.
	-Cuando las operaciones tienen largas sentencias con multiples ramas que depende del estado de un objeto.
	
		Implementacion

La clase Context envia mensajes a los estados concretos dentro de su codigo para brindarles a estos la responsabilidad que debe cumplir
el objeto Context. Asi el objeto Context va cambiando las responsabilidades segun el estado en que se encuentra. Para llevar a cabo esto
se puede utilizar dos tacticas: que el State sea una interfaz o una clase abstracta.  

Para resolver este problema, siempre se debe intentar utilizar una interfaz, exceptuando aquellos casos donde se necesite repetir 
un comportamiento en los estados concretos: para ello lo ideal es utilizar una clase abstracta(state) con los metodos repetitivos 
en codigo, de manera que los estados concretos lo hereden. En este caso, el resto de los metodos no repetitivos deberian ser metodos
abstractos. 

Un tipo muy importante a tener en cuenta: el patron no indica exactamente donde definir las transaciones de un estado a otro. Existen
dos formas de solucinar esto: definiendo estas transiciones dentro de la clase contexto, la otra es definiendo estas transiciones 
en las subclases de State. Es mas conveniente utilizar la primer solucion cuando el criterio a aplicar es fijo, es decir, no se modificara.
En cambio la segunda resulta conveniente cuando este criterio es dinamico, el inconveniente aqui se presenta en la dependencia
de codigo entre las subclases. 
